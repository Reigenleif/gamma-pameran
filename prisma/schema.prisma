// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum UserRole {
    PARTICIPANT
    ADMIN
}

enum Gender {
    MALE
    FEMALE
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    hashPassword  String?
    imageUrl      String?
    image         String?
    address       String?

    role UserRole @default(PARTICIPANT)

    accounts        Account[]
    sessions        Session[]
    ParticipantData ParticipantData[]
    PaintingOrder   PaintingOrder[]
    Order           Order[]
    StockExchange   StockExchange[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ParticipantData {
    id String @id @default(cuid())

    userId String

    fullName    String?
    address     String?
    city        String?
    zip         String?
    isSubmitted Boolean @default(false)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Models for stock market
model PaymentMethod {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    providerName  String
    accountName   String
    accountNumber String
    StockExchange StockExchange[]
}

model StockSetting {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String @unique
    description String
    code        String @unique
    price       Float
    maxStock    Int

    StockExchange StockExchange[]
    Product       Product[]
}

enum StockExchangeConfirmationStatus {
    PENDING
    ACCEPTED
    REJECTED
}

model StockExchange {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    code           Int                             @unique @default(autoincrement())
    buyerName      String
    quantity       Int
    price          Float
    timeOccured    DateTime                        @default(now())
    status         StockExchangeConfirmationStatus
    StockSetting   StockSetting?                   @relation(fields: [stockSettingId], references: [id])
    stockSettingId String?
    address        String?

    buyer   User   @relation(fields: [buyerId], references: [id])
    buyerId String

    paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
    paymentMethodId String?

    imageUrl String?
}

// Models for product market
model Category {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name    String    @unique
    Product Product[]
}

model Product {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    categoryId         String
    name               String @unique
    price              Float
    imageUrl           String
    description        String
    displayCoordinateX Float
    displayCoordinateY Float
    floatCoordinateX   Float
    floatCoordinateY   Float

    maxStock    Int
    isAvailable Boolean  @default(true)
    Order       Order[]
    category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    stockSetting   StockSetting? @relation(fields: [stockSettingId], references: [id])
    stockSettingId String?
}

model Order {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    productId String
    count     Int
    price     Float
    isPaid    Boolean @default(false)

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Models for painting market
model PaintingProduct {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name          String          @unique
    price         Float
    imageUrl      String
    description   String
    artist        String
    PaintingOrder PaintingOrder[]
}

model PaintingOrder {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId     String
    productId  String
    offerValue Float
    isPaid     Boolean @default(false)

    user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    product PaintingProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}
